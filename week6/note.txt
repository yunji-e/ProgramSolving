>>Selection Sort(선택정렬)
    //각 루프마다 최대원소 search-맨오른쪽 원소와 바꾸기-맨오른쪽원소 제외하고 반복
    //(n-1)회 반복
    42153-입력
    42135
    21345
    21345
    12345-정렬완료

    for(i = 0; i < n-1; i++){
        int max_idx = 0; //최대원소 인덱스 저장
        for(j = 0; j < n-i; j++){
            if(A[max_idx] < A[j])
                max_idx = j;
        }
        //max_idx -> the location of the max. value.
        //A[max_idx] <> A[n-i-1] 
        swap(A[max_idx], A[n-i-1]);
    }

    i = 0; A[0]...A[n-1] -> for(j=0;j<n  ;j++) (find_max)
    i = 1; A[0]...A[n-2]    for(j=0;j<n-1;j++)
    i = 2; A[0]...A[n-3]    for(j=0;j<n-2;j++)
    ...


>>Bubble Sort
    //인접elements간 비교/교환-끝에 도달하면 끝 원소 제외 후 반복
    //(n-1)회 반복
    29/10/13/37/13 -입력
    10/29/13/37/13
    10/13/29/37/13
    10/13/29/37/13
    10/13/29/13/37 -1차정렬 완

    for(i = 0; i < n-1; i++){
        for(j = 0; j < n-i-1; j++){
            if(A[j]>A[j+1])
                swap(A[j], A[j+1]);
        }
    }

    i = 0; n-1회 비교; for(j = 0;j < n - 1;j++)
    i = 1; n-2회 비교; for(j = 0;j < n - 2;j++)
    i = 2; n-3회 비교; for(j = 0;j < n - 3;j++)


>>Insertion Sort(삽입정렬)
    //Bubble, Selection과의 차이점: 정렬이 앞부터 됨(Bubble, Selection은 맨 뒤부터)
    //자신보다 큰 최초의 값의 자리에 삽입+그 이후 자리 인덱스 +1씩
    //(n-1)회 반복
    29/10/14/37/13 (10)
    10/29/14/37/13 (29)
    10/14/29/37/13 (14)
    10/14/29/37/13 (37)
    10/13/14/29/37 (13)

    for(i = 0; i < n-1; i++){}
    i = 0; insert A[1] to...
    i = 1; insert A[2] to...
    i = 2; insert A[3] to...
    insert A[i+1] to...

    ->숫자 깔끔하게 하기
    for(i = 1; i < n; i++){
        //find a position for A[i]
        for(j = 0; j < i; j++)
            if(A[j] > A[i]) break;
        //j <- positon for A[i](j = A[i]가 삽입되어야 할 위치)
        tmp = A[i]
        //shift operations (A[j]...A[i-1] -> A[j+1]..A[i])
          이때 정렬된 숫자들을 뒤에서부터 하나씩 (뒤로 한 칸)미뤄야함
          앞에서부터 미룰 경우 데이터가 덮어씌워져 손실 발생
        for(k = i; k > j; k--)
            A[k] = A[k-1]; //A[j+1] = A[j]
    }
    
    i = 1; insert A[1] to...; A[0]..A[0]
    i = 2; insert A[2] to...; A[0]..A[1]
    i = 3; insert A[3] to...; A[0]..A[2]
    insert A[i] to...


>>Merge Sort


>>Quick Sort

>>2차원 배열 동적 할당
    int **map;

    map = (int**)malloc(sizeof(int)*m);

    (방법1)
    for(int i = 0; i < m; i++)
        map[i] = (int*)malloc(sizeof(int)*n);
    for(int i = 0; i < m; i++)
        free(map[i]);
    free(map);

    (방법2)
    map[0] = (int*)malloc(sizeof(int)*n*m);
    free(map[0]);
    free(map);